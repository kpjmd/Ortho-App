import React, { useState, useEffect } from 'react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const InsightCard = ({ patientId }) => {
  const [insights, setInsights] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showProviderSummary, setShowProviderSummary] = useState(false);

  useEffect(() => {
    const fetchInsights = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await axios.get(`${API}/insights/${patientId}/detailed`);
        setInsights(response.data);
        
      } catch (err) {
        console.error('Failed to fetch detailed insights:', err);
        setError('Failed to load insights');
      } finally {
        setLoading(false);
      }
    };

    if (patientId) {
      fetchInsights();
    }
  }, [patientId]);

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="space-y-3">
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
            <div className="h-4 bg-gray-200 rounded w-4/6"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="text-red-600 text-center">
          <p>{error}</p>
        </div>
      </div>
    );
  }

  if (!insights) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="text-gray-600 text-center">
          <p>No insights available</p>
        </div>
      </div>
    );
  }

  // Get status color and icon
  const getStatusColor = (status) => {
    switch (status) {
      case 'On Track':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'At Risk':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Needs Attention':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'On Track':
        return '✓';
      case 'At Risk':
        return '⚠';
      case 'Needs Attention':
        return '⚠';
      default:
        return '?';
    }
  };

  // Get priority color
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Generate provider summary
  const generateProviderSummary = () => {
    const summary = {
      patientId,
      recoveryStatus: insights.recovery_status,
      weeksPostSurgery: insights.weeks_post_surgery,
      progressPercentage: insights.progress_percentage,
      riskScore: insights.risk_assessment?.risk_score || 0,
      keyFindings: insights.key_findings,
      concerningPatterns: insights.concerning_patterns,
      highPriorityRecommendations: insights.recommendations.filter(r => r.priority === 'high'),
      milestonesMissed: insights.milestone_status.filter(m => m.critical && !m.achieved).length,
      generatedAt: new Date().toLocaleDateString()
    };

    const summaryText = `
PATIENT RECOVERY SUMMARY
Generated: ${summary.generatedAt}

Patient ID: ${summary.patientId}
Recovery Status: ${summary.recoveryStatus}
Weeks Post-Surgery: ${summary.weeksPostSurgery}
Progress: ${summary.progressPercentage.toFixed(1)}%
Risk Score: ${summary.riskScore.toFixed(1)}/100

KEY FINDINGS:
${summary.keyFindings.map(finding => `• ${finding}`).join('\n')}

CONCERNING PATTERNS:
${summary.concerningPatterns.map(pattern => `• ${pattern}`).join('\n')}

HIGH PRIORITY RECOMMENDATIONS:
${summary.highPriorityRecommendations.map(rec => `• ${rec.text}`).join('\n')}

CRITICAL MILESTONES MISSED: ${summary.milestonesMissed}

This summary was generated by the AI-powered recovery tracking system.
Please review alongside clinical assessment and patient interaction.
    `;

    return summaryText;
  };

  const handleShareWithProvider = () => {
    const summaryText = generateProviderSummary();
    
    // Create a downloadable text file
    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `recovery-summary-${patientId}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex justify-between items-start mb-6">
        <h3 className="text-xl font-semibold text-gray-800">AI Recovery Insights</h3>
        <button
          onClick={handleShareWithProvider}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm"
        >
          Share with Provider
        </button>
      </div>

      {/* Recovery Status Badge */}
      <div className="mb-6">
        <div className={`inline-flex items-center px-4 py-2 rounded-lg border-2 ${getStatusColor(insights.recovery_status)}`}>
          <span className="text-lg mr-2">{getStatusIcon(insights.recovery_status)}</span>
          <span className="font-semibold text-lg">{insights.recovery_status}</span>
        </div>
        <div className="text-sm text-gray-600 mt-2">
          {insights.weeks_post_surgery} weeks post-surgery • {insights.progress_percentage.toFixed(1)}% progress
        </div>
      </div>

      {/* Key Findings */}
      {insights.key_findings.length > 0 && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold text-gray-800 mb-3">Key Findings</h4>
          <div className="space-y-2">
            {insights.key_findings.map((finding, index) => (
              <div key={index} className="flex items-start space-x-2">
                <span className="text-blue-600 mt-1">•</span>
                <span className="text-gray-700">{finding}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Concerning Patterns */}
      {insights.concerning_patterns.length > 0 && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold text-gray-800 mb-3">⚠ Concerning Patterns</h4>
          <div className="space-y-2">
            {insights.concerning_patterns.map((pattern, index) => (
              <div key={index} className="flex items-start space-x-2 p-3 bg-red-50 rounded-md">
                <span className="text-red-600 mt-1">⚠</span>
                <span className="text-red-800">{pattern}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Positive Trends */}
      {insights.positive_trends.length > 0 && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold text-gray-800 mb-3">✓ Positive Trends</h4>
          <div className="space-y-2">
            {insights.positive_trends.map((trend, index) => (
              <div key={index} className="flex items-start space-x-2 p-3 bg-green-50 rounded-md">
                <span className="text-green-600 mt-1">✓</span>
                <span className="text-green-800">{trend}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Recommendations */}
      <div className="mb-6">
        <h4 className="text-lg font-semibold text-gray-800 mb-3">Recommendations</h4>
        <div className="space-y-3">
          {insights.recommendations.map((rec, index) => (
            <div key={index} className="border rounded-md p-4">
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getPriorityColor(rec.priority)}`}>
                    {rec.priority.toUpperCase()}
                  </span>
                  {rec.category && (
                    <span className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                      {rec.category}
                    </span>
                  )}
                </div>
              </div>
              <p className="text-gray-800 mb-2">{rec.text}</p>
              {rec.evidence && (
                <p className="text-sm text-gray-600 italic">
                  Evidence: {rec.evidence}
                </p>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Risk Assessment */}
      {insights.risk_assessment && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold text-gray-800 mb-3">Risk Assessment</h4>
          <div className="bg-gray-50 rounded-md p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Risk Score:</span>
              <span className={`font-bold ${insights.risk_assessment.risk_score >= 70 ? 'text-red-600' : 
                insights.risk_assessment.risk_score >= 50 ? 'text-yellow-600' : 'text-green-600'}`}>
                {insights.risk_assessment.risk_score.toFixed(1)}/100
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium text-gray-700">Risk Category:</span>
              <span className={`font-medium ${insights.risk_assessment.risk_category === 'Very High' || insights.risk_assessment.risk_category === 'High' ? 'text-red-600' : 
                insights.risk_assessment.risk_category === 'Moderate' ? 'text-yellow-600' : 'text-green-600'}`}>
                {insights.risk_assessment.risk_category}
              </span>
            </div>
          </div>
        </div>
      )}

      {/* Projected Recovery */}
      {insights.projected_recovery_date && (
        <div className="mb-6">
          <h4 className="text-lg font-semibold text-gray-800 mb-3">Projected Recovery</h4>
          <div className="bg-blue-50 rounded-md p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Estimated Target Achievement:</span>
              <span className="font-medium text-blue-800">
                {new Date(insights.projected_recovery_date).toLocaleDateString()}
              </span>
            </div>
            {insights.confidence_interval && (
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-700">Confidence Interval:</span>
                <span className="text-sm text-gray-600">{insights.confidence_interval}</span>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Footer */}
      <div className="text-xs text-gray-500 border-t pt-4">
        <p>Last updated: {new Date(insights.date).toLocaleDateString()}</p>
        <p>This analysis is based on validated clinical assessment tools and should be reviewed alongside professional medical evaluation.</p>
      </div>
    </div>
  );
};

export default InsightCard;